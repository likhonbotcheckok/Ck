const {
  fetchInbox,
  fetchFullEmail,
} = require('../utils/mailcxHandler');

module.exports = (bot) => {
  const escapeMd = (text) => text.replace(/([_*[\]()~`>#+=|{}.!\\-])/g, '\\$1');

  bot.onText(/\.otp/, async (msg) => {
    const chatId = msg.chat.id;

    // tempmail ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶Ü‡¶ó‡ßá ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï
    const activeEmails = global.activeEmails || {};
    const email = activeEmails[chatId];

    if (!email) {
      return bot.sendMessage(chatId, '‚ùå ‡¶Ü‡¶ó‡ßá .tempmail ‡¶¶‡¶ø‡ßü‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®‡•§');
    }

    try {
      const inbox = await fetchInbox(email);

      if (inbox.length === 0) {
        return bot.sendMessage(chatId, `üì≠ ‡¶è‡¶ñ‡¶®‡¶ì ‡¶ï‡ßã‡¶®‡ßã ‡¶Æ‡ßá‡¶á‡¶≤ ‡¶Ü‡¶∏‡ßá‡¶®‡¶ø\n\`${escapeMd(email)}\``, {
          parse_mode: 'MarkdownV2'
        });
      }

      const latest = inbox[0];
      const full = await fetchFullEmail(email, latest.id);
      const body = full?.body || '';

      // OTP ‡¶ï‡ßã‡¶° match: ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã 4-8 digit
      const code = body.match(/\b\d{4,8}\b/)?.[0];

      if (!code) {
        return bot.sendMessage(chatId, `üì¨ ‡¶Æ‡ßá‡¶á‡¶≤ ‡¶è‡¶∏‡ßá‡¶õ‡ßá, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶ï‡ßã‡¶®‡ßã ‡¶ï‡ßã‡¶° ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø:\n\n‚úâÔ∏è Subject: *${escapeMd(latest.subject)}*`, {
          parse_mode: 'MarkdownV2'
        });
      }

      await bot.sendMessage(chatId, `‚úÖ ‡¶ï‡ßã‡¶° ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá:\n\nüîê *${escapeMd(code)}*`, {
        parse_mode: 'MarkdownV2'
      });
    } catch (err) {
      console.error('‚ùå OTP fetch error:', err.message);
      return bot.sendMessage(chatId, '‚ùå OTP ‡¶Ü‡¶®‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá, ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§');
    }
  });
};
